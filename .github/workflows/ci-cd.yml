name: Photon Neuromorphics CI/CD

on:
  push:
    branches: [ main, develop, 'terragon/*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort
        pip install -e ".[dev]"
    
    - name: Format check with Black
      run: black --check --diff .
    
    - name: Lint with flake8
      run: flake8 photon_neuro tests examples --max-line-length=100 --ignore=E501,W503
    
    - name: Type check with mypy
      run: mypy photon_neuro --ignore-missing-imports --no-strict-optional
    
    - name: Import sorting with isort
      run: isort --check-only --diff .

  test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev libfftw3-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openblas fftw
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev,hardware]"
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=photon_neuro --cov-report=xml --cov-report=term-missing
    
    - name: Run WASM integration tests
      run: |
        pytest tests/test_wasm_integration.py -v
    
    - name: Run performance benchmarks (quick)
      run: |
        pytest tests/test_performance_benchmarks.py::TestMZIPerformance::test_mzi_scaling_performance -v
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  test-examples:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install matplotlib seaborn  # For examples
    
    - name: Test basic usage example
      run: |
        python examples/basic_usage.py --test-mode
    
    - name: Test robust features demo
      run: |
        python examples/robust_features_demo.py --quick-test
    
    - name: Validate advanced examples syntax
      run: |
        python -m py_compile examples/advanced_optical_training.py
        python -m py_compile examples/quantum_photonic_interface.py

  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Set up Emscripten
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install latest
        ./emsdk activate latest
        source ./emsdk_env.sh
        echo "EMSDK_PATH=$PWD" >> $GITHUB_ENV
    
    - name: Build WASM module (mock)
      run: |
        # In a real implementation, this would compile C++ to WASM
        mkdir -p wasm_build
        echo "Mock WASM build completed" > wasm_build/photon_neuro.wasm
        echo "Mock JS bindings generated" > wasm_build/photon_neuro.js
    
    - name: Test JavaScript interface generation
      run: |
        python -c "from photon_neuro.wasm.js_interface import export_wasm_module; print('JS interface generated:', export_wasm_module('wasm_build'))"
    
    - name: Upload WASM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wasm-build
        path: wasm_build/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .
    
    - name: Run Bandit security scan
      run: |
        bandit -r photon_neuro -f json -o bandit-report.json || true
        bandit -r photon_neuro --severity-level medium
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-python, build-wasm]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,hardware]"
    
    - name: Download WASM artifacts
      uses: actions/download-artifact@v3
      with:
        name: wasm-build
        path: wasm_build/
    
    - name: Run integration tests
      run: |
        # Full integration test suite
        pytest tests/test_wasm_integration.py::TestWASMIntegration -v
        pytest tests/test_performance_benchmarks.py::TestSystemBenchmarks::test_end_to_end_inference -v
    
    - name: Test research framework
      run: |
        cd research
        python -c "from experimental_framework import ResearchExperimentRunner; runner = ResearchExperimentRunner('test_results'); print('Research framework validated')"

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: photonneuro/photon-neuromorphics
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm photonneuro/photon-neuromorphics:latest python -c "import photon_neuro; print('Docker image working:', photon_neuro.__version__)"

  performance-benchmarks:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run comprehensive benchmarks
      run: |
        pytest tests/test_performance_benchmarks.py -v -m "not slow" --tb=short
    
    - name: Generate performance report
      run: |
        python -c "
        from tests.test_performance_benchmarks import generate_performance_report
        import json
        results = {'benchmark_completed': True, 'timestamp': '$(date -Iseconds)'}
        report = generate_performance_report(results)
        with open('performance_report.md', 'w') as f: f.write(report)
        print('Performance report generated')
        "
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance_report.md

  deploy-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install sphinx sphinx-rtd-theme nbsphinx
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  release-pypi:
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-python, integration-tests, security-scan]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
    
    - name: Test installation from Test PyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ photon-neuromorphics
        python -c "import photon_neuro; print('Test PyPI installation successful')"
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  notify-deployment:
    runs-on: ubuntu-latest
    needs: [release-pypi, docker-build, deploy-docs]
    if: always() && github.event_name == 'release'
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.release-pypi.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "✅ Deployment successful: PyPI, Docker, and Docs updated"
          echo "🎉 Photon Neuromorphics ${{ github.event.release.tag_name }} is now available!"
        else
          echo "❌ Deployment encountered issues"
          echo "PyPI: ${{ needs.release-pypi.result }}"
          echo "Docker: ${{ needs.docker-build.result }}"
          echo "Docs: ${{ needs.deploy-docs.result }}"
        fi