version: '3.8'

services:
  # Main application service
  photon-neuro:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: photonneuro/photon-neuromorphics-sdk:latest
    container_name: photon-neuro-app
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - PHOTON_NEURO_ENV=production
      - PHOTON_NEURO_LOG_LEVEL=INFO
    volumes:
      - ./data:/opt/photon-neuro/data
      - ./models:/opt/photon-neuro/models
      - ./config:/opt/photon-neuro/config
    ports:
      - "8000:8000"
    networks:
      - photon-neuro-network
    healthcheck:
      test: ["CMD", "python", "-c", "import photon_neuro; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Development environment with Jupyter
  photon-neuro-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: photonneuro/photon-neuromorphics-sdk:dev
    container_name: photon-neuro-dev
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - PHOTON_NEURO_ENV=development
      - PHOTON_NEURO_LOG_LEVEL=DEBUG
    volumes:
      - ./:/opt/photon-neuro
      - jupyter-data:/home/photon/.jupyter
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8080:8080"  # Additional dev server
    networks:
      - photon-neuro-network
    profiles:
      - dev

  # GPU-enabled service
  photon-neuro-gpu:
    build:
      context: .
      dockerfile: Dockerfile
      target: gpu
    image: photonneuro/photon-neuromorphics-sdk:gpu
    container_name: photon-neuro-gpu
    restart: unless-stopped
    environment:
      - PYTHONUNBUFFERED=1
      - PHOTON_NEURO_ENV=production
      - PHOTON_NEURO_USE_GPU=true
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ./data:/opt/photon-neuro/data
      - ./models:/opt/photon-neuro/models
      - gpu-cache:/home/photon/.cache
    ports:
      - "8001:8000"
    networks:
      - photon-neuro-network
    profiles:
      - gpu
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: photon-neuro-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - photon-neuro-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database for metadata and results
  postgres:
    image: postgres:15-alpine
    container_name: photon-neuro-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=photon_neuro
      - POSTGRES_USER=photon_user
      - POSTGRES_PASSWORD=photon_secure_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - photon-neuro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U photon_user -d photon_neuro"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - database

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: photon-neuro-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - photon-neuro-network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: photon-neuro-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - photon-neuro-network
    profiles:
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=photon_admin
      - GF_USERS_ALLOW_SIGN_UP=false

  # Load balancer for multiple instances
  nginx:
    image: nginx:alpine
    container_name: photon-neuro-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - photon-neuro-network
    profiles:
      - production
    depends_on:
      - photon-neuro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO for object storage (models, datasets)
  minio:
    image: minio/minio:latest
    container_name: photon-neuro-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - photon-neuro-network
    profiles:
      - storage
    environment:
      - MINIO_ROOT_USER=photon_minio
      - MINIO_ROOT_PASSWORD=photon_minio_secure
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MLflow for experiment tracking
  mlflow:
    image: python:3.10-slim
    container_name: photon-neuro-mlflow
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
      - ./mlflow:/mlflow/config
    networks:
      - photon-neuro-network
    profiles:
      - mlops
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://photon_user:photon_secure_password@postgres:5432/photon_neuro
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    depends_on:
      - postgres
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server 
               --backend-store-uri postgresql://photon_user:photon_secure_password@postgres:5432/photon_neuro
               --default-artifact-root /mlflow/artifacts
               --host 0.0.0.0
               --port 5000"

# Networks
networks:
  photon-neuro-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  jupyter-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local
  minio-data:
    driver: local
  mlflow-artifacts:
    driver: local
  gpu-cache:
    driver: local

# Health check and service discovery
x-common-healthcheck: &common-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

x-common-logging: &common-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-common-deploy: &common-deploy
  restart_policy:
    condition: unless-stopped
    delay: 5s
    max_attempts: 3
    window: 120s