apiVersion: apps/v1
kind: Deployment
metadata:
  name: photon-neuro-app
  namespace: photon-neuro
  labels:
    app: photon-neuro
    version: v1.0
    component: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: photon-neuro
      component: application
  template:
    metadata:
      labels:
        app: photon-neuro
        component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: photon-neuro-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: photon-neuro
        image: photonneuro/photon-neuromorphics-sdk:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: PHOTON_NEURO_ENV
          value: "production"
        - name: PHOTON_NEURO_LOG_LEVEL
          value: "INFO"
        - name: REDIS_URL
          value: "redis://photon-neuro-redis:6379"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: photon-neuro-secrets
              key: database-url
        - name: MINIO_ENDPOINT
          value: "photon-neuro-minio:9000"
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: photon-neuro-secrets
              key: minio-access-key
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: photon-neuro-secrets
              key: minio-secret-key
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: data-storage
          mountPath: /opt/photon-neuro/data
        - name: model-storage
          mountPath: /opt/photon-neuro/models
        - name: config
          mountPath: /opt/photon-neuro/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: photon-neuro-data-pvc
      - name: model-storage
        persistentVolumeClaim:
          claimName: photon-neuro-models-pvc
      - name: config
        configMap:
          name: photon-neuro-config
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node-type"
        operator: "Equal"
        value: "compute"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - photon-neuro
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: photon-neuro-gpu
  namespace: photon-neuro
  labels:
    app: photon-neuro
    version: v1.0
    component: gpu-compute
spec:
  replicas: 2
  strategy:
    type: Recreate  # GPU pods need recreate strategy
  selector:
    matchLabels:
      app: photon-neuro
      component: gpu-compute
  template:
    metadata:
      labels:
        app: photon-neuro
        component: gpu-compute
    spec:
      serviceAccountName: photon-neuro-sa
      containers:
      - name: photon-neuro-gpu
        image: photonneuro/photon-neuromorphics-sdk:gpu
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: PHOTON_NEURO_ENV
          value: "production"
        - name: PHOTON_NEURO_USE_GPU
          value: "true"
        - name: NVIDIA_VISIBLE_DEVICES
          value: "all"
        resources:
          requests:
            cpu: 2
            memory: 8Gi
            nvidia.com/gpu: 1
          limits:
            cpu: 4
            memory: 16Gi
            nvidia.com/gpu: 1
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 15
        volumeMounts:
        - name: data-storage
          mountPath: /opt/photon-neuro/data
        - name: model-storage
          mountPath: /opt/photon-neuro/models
        - name: gpu-cache
          mountPath: /home/photon/.cache
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: photon-neuro-data-pvc
      - name: model-storage
        persistentVolumeClaim:
          claimName: photon-neuro-models-pvc
      - name: gpu-cache
        emptyDir:
          sizeLimit: 10Gi
      nodeSelector:
        accelerator: nvidia-tesla-v100  # Adjust based on your GPU nodes
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: photon-neuro-service
  namespace: photon-neuro
  labels:
    app: photon-neuro
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: photon-neuro
    component: application

---
apiVersion: v1
kind: Service
metadata:
  name: photon-neuro-gpu-service
  namespace: photon-neuro
  labels:
    app: photon-neuro
    component: gpu-compute
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: photon-neuro
    component: gpu-compute

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: photon-neuro-ingress
  namespace: photon-neuro
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.photon-neuro.io
    secretName: photon-neuro-tls
  rules:
  - host: api.photon-neuro.io
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: photon-neuro-service
            port:
              number: 80
      - path: /gpu
        pathType: Prefix
        backend:
          service:
            name: photon-neuro-gpu-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: photon-neuro-hpa
  namespace: photon-neuro
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: photon-neuro-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: requests_per_second
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: photon-neuro-pdb
  namespace: photon-neuro
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: photon-neuro
      component: application

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: photon-neuro-sa
  namespace: photon-neuro

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: photon-neuro
  name: photon-neuro-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: photon-neuro-rolebinding
  namespace: photon-neuro
subjects:
- kind: ServiceAccount
  name: photon-neuro-sa
  namespace: photon-neuro
roleRef:
  kind: Role
  name: photon-neuro-role
  apiGroup: rbac.authorization.k8s.io